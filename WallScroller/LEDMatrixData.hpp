#pragma once

constexpr auto X_ACCELERATION_OFFSET = -3133;//-3091;
constexpr auto Y_ACCELERATION_OFFSET = -4425;//-4415;
constexpr auto Z_ACCELERATION_OFFSET = 737;//737;

constexpr auto X_GYROSCOPE_OFFSET = -12;//-25;
constexpr auto Y_GYROSCOPE_OFFSET = 22;//20;
constexpr auto Z_GYROSCOPE_OFFSET = -1;//0;

// generated characters must be rotated by 180 degree and flipped horizontally
const uint64_t PROGMEM NUMBER_CODES_UPDOWN[] = {
    0x003c66766e66663c,
    0x0018181c1818187e,
    0x003c6660300c067e,
    0x003c66603860663c,
    0x00303834327e3030,
    0x007e063e6060663c,
    0x003c66063e66663c,
    0x007e663030181818,
    0x003c66663c66663c,
    0x003c66667c60663c
};
constexpr auto NUMBER_CODES_UPDOWN_LENGTH = sizeof(NUMBER_CODES_UPDOWN) / sizeof(NUMBER_CODES_UPDOWN[0]);

const uint64_t PROGMEM NUMBER_CODES_LEFTRIGHT[] = {
    0x003e7f49517f3e00,
    0x0001117f7f010100,
    0x0023674549793100,
    0x00226349497f3600,
    0x000c14247f7f0400,
    0x00727351515f4e00,
    0x003e7f49496f2600,
    0x006060475f786000,
    0x00367f49497f3600,
    0x00327b49497f3e00
};
constexpr auto NUMBER_CODES_LEFTRIGHT_LENGTH = sizeof(NUMBER_CODES_LEFTRIGHT) / sizeof(NUMBER_CODES_LEFTRIGHT[0]);

// #TODO: implement universal string display mechanism (possibly with marquee functionality) - up-down and -left-right scrolling
const uint64_t PROGMEM CHAR_CODES_UPPER_UPDOWN[] = {
    0x003c66667e666666,
    0x003e66663e66663e,
    0x003c66060606663c,
    0x003e66666666663e,
    0x007e06063e06067e,
    0x007e06063e060606,
    0x003c66060676663c,
    0x006666667e666666,
    0x003c18181818183c,
    0x007830303036361c,
    0x0066361e0e1e3666,
    0x000606060606067e,
    0x00c6eefed6c6c6c6,
    0x00c6cedef6e6c6c6,
    0x003c66666666663c,
    0x003e6666663e0606,
    0x003c666666763c60,
    0x003e66663e1e3666,
    0x003c66063c60663c,
    0x007e5a1818181818,
    0x006666666666667c,
    0x0066666666663c18,
    0x00c6c6c6d6feeec6,
    0x00c6c66c386cc6c6,
    0x006666663c181818,
    0x007e6030180c067e
};
constexpr auto CHAR_CODES_UPPER_UPDOWN_LENGTH = sizeof(CHAR_CODES_UPPER_UPDOWN) / sizeof(CHAR_CODES_UPPER_UPDOWN[0]);

const uint64_t PROGMEM CHAR_CODES_UPPER_LEFTRIGHT[] = {
    0x003f7f48487f3f00,
    0x007f7f49497f3600,
    0x003e7f4141632200,
    0x007f7f41417f3e00,
    0x007f7f4949494100,
    0x007f7f4848484000,
    0x003e7f4145672600,
    0x007f7f08087f7f00,
    0x0000417f7f410000,
    0x000607417f7e4000,
    0x007f7f1c36634100,
    0x007f7f0101010100,
    0x007f7f3018307f7f,
    0x007f7f30180c7f7f,
    0x003e7f41417f3e00,
    0x007f7f44447c3800,
    0x003c7e42467f3d00,
    0x007f7f4c4e7b3100,
    0x00327b49496f2600,
    0x0060407f7f406000,
    0x007e7f01017f7f00,
    0x007c7e03037e7c00,
    0x007f7f060c067f7f,
    0x0063771c081c7763,
    0x0070780f0f787000,
    0x0043474d59716100
};
constexpr auto CHAR_CODES_UPPER_LEFTRIGHT_LENGTH = sizeof(CHAR_CODES_UPPER_LEFTRIGHT) / sizeof(CHAR_CODES_UPPER_LEFTRIGHT[0]);

const uint64_t PROGMEM CHAR_CODES_LOWER_UPDOWN[] = {
    0x0000003c607c667c,
    0x000606063e66663e,
    0x0000003c6606663c,
    0x006060607c66667c,
    0x0000003c667e063c,
    0x00386c0c0c3e0c0c,
    0x00007c66667c603c,
    0x000606063e666666,
    0x000018001818183c,
    0x003000303036361c,
    0x00060666361e3666,
    0x0018181818181818,
    0x000000c6eefed6d6,
    0x0000003e7e666666,
    0x0000003c6666663c,
    0x00003e66663e0606,
    0x00003c36363cb0f0,
    0x0000003e66660606,
    0x0000007c023c403e,
    0x000018187e181818,
    0x000000666666667c,
    0x0000000066663c18,
    0x000000c6d6d6d67c,
    0x000000663c183c66,
    0x00000066667c603c,
    0x0000003c30180c3c
};
constexpr auto CHAR_CODES_LOWER_UPDOWN_LENGTH = sizeof(CHAR_CODES_LOWER_UPDOWN) / sizeof(CHAR_CODES_LOWER_UPDOWN[0]);

const uint64_t PROGMEM CHAR_CODES_LOWER_LEFTRIGHT[] = {
    0x00021715151f0f00,
    0x007f7f09090f0600,
    0x000e1f11111b0a00,
    0x00060f09097f7f00,
    0x000e1f15151d0c00,
    0x00043f7f44642000,
    0x00183d25253f3e00,
    0x007f7f08080f0700,
    0x0000012f2f010000,
    0x000607015f5e0000,
    0x007f7f040e1b1100,
    0x0000007f7f000000,
    0x001f1f0c070c1f1f,
    0x001f1f18181f0f00,
    0x000e1f11111f0e00,
    0x003f3f24243c1800,
    0x00183c243f3f0103,
    0x001f1f10101c0c00,
    0x0009151515151200,
    0x0008083f3f080800,
    0x001e1f01011f1f00,
    0x000c0e03030e0c00,
    0x001e1f010f011f1e,
    0x00111b0e0e1b1100,
    0x00181d05051f1e00,
    0x000013171d190000
};
constexpr auto CHAR_CODES_LOWER_LEFTRIGHT_LENGTH = sizeof(CHAR_CODES_LOWER_LEFTRIGHT) / sizeof(CHAR_CODES_LOWER_LEFTRIGHT[0]);

const uint64_t PROGMEM DEMO_CODES[]  = {
    0x003e66666666663e,
    0x007e06063e06067e,
    0x00c6eefed6c6c6c6,
    0x003c66666666663c
};
constexpr auto DEMO_CODES_LENGTH = sizeof(DEMO_CODES) / sizeof(DEMO_CODES[0]);

const uint64_t PROGMEM exclamationMark = 0x00183c3c18180018;
const uint64_t PROGMEM space = 0;
// space is equal to 0, should be handled separately
